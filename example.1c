#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОрганизацияПоУмолчанию = Справочники.Организации.ОрганизацияПоУмолчанию();
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	СтранаРегистрации = Справочники.СтраныМира.НайтиПоКоду("643");
	
КонецПроцедуры

#КонецОбласти

#Область ФункцииДляЗагрузки
&НаКлиенте
Процедура ПутьОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Описание = Новый ОписаниеОповещения("ПослеВыбораФайла",ЭтаФорма);
	
	ПараметрыДиалога = Новый Структура("Фильтр","Формат JSON (*.json)|*.json");
	
	ОбменДаннымиКлиент.ВыбратьИПередатьФайлНаСервер(Описание,ПараметрыДиалога,ЭтаФорма.УникальныйИдентификатор)
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайла(Результат,ДополнительныеПараметры) Экспорт
	
	Объект.Путь = Результат.Имя;
	
	ОбработатьФайлНаСервере(Результат);
	
	Для Каждого Строка ИЗ ДеревоДанных.ПолучитьЭлементы() Цикл
		Элементы.ДеревоДанных.Развернуть(Строка.ПолучитьИдентификатор(),Истина);
	КонецЦикла; 	
КонецПроцедуры

&НаСервере
Процедура ОбработатьФайлНаСервере(Результат)	
	
	ТипФайлаМассив = СтрРазделить(Результат.Имя,".");
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(ТипФайлаМассив[ТипФайлаМассив.Количество()-1]);
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Результат.Хранение); 
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);                                      	
	
	ЧтениеJSON = Новый ЧтениеJSON;
	
	ЧтениеJSON.ОткрытьФайл(ИмяВременногоФайла);	
	
	ПрочестьИнформациюИзJSON(ЧтениеJSON);
	
	УдалитьИзВременногоХранилища(Результат.Хранение);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработкуЗагрузки(Команда)
	
	ВыполнитьОбработкуЗагрузкиНаСервере();	
	
	Для Каждого Строка ИЗ ДеревоДанных.ПолучитьЭлементы() Цикл
		Элементы.ДеревоДанных.Развернуть(Строка.ПолучитьИдентификатор(),Истина);
	КонецЦикла;
	
	ОбщегоНазначенияКлиент.СообщитьПользователю("Обработка выполнена");
	
КонецПроцедуры

#КонецОбласти 

#Область ЧтениеJSON
&НаСервере
Процедура ПрочестьИнформациюИзJSON(ЧтениеJSON)
	
	ПолученныеДанные = ПрочитатьJSON(ЧтениеJSON);
	
	ЧтениеJSON.Закрыть();	
	
	Дерево = РеквизитФормыВЗначение("ДеревоДанных");
	
	Дерево.Строки.Очистить();
	
	ПараметрыПоиска = Новый Структура("ДанныеБазы",ПолучитьИнформациюИзБазы());
	ПараметрыПоиска.Вставить("Органиизация",Справочники.Организации.ОрганизацияПоУмолчанию());
	
	//Сборка дерева
	Для Каждого ТипДанных Из ПолученныеДанные Цикл
		
		СтрокаДерева = Дерево.Строки.Добавить();
		
		СтрокаДерева.Тип = Сред(ТипДанных.Ключ,3);
		
		СтрокаДерева.ЭтоГруппа = Истина;
		
		Для Каждого ТипЭлемента Из ТипДанных.Значение Цикл
			
			СтрокаТипаЭлемента = СтрокаДерева.Строки.Добавить();
			
			СтрокаТипаЭлемента.Тип = Сред(ТипЭлемента.Ключ,3);
			
			СтрокаТипаЭлемента.ЭтоГруппа = Истина;
			
			Для Каждого ДанныеJSON из ТипЭлемента.Значение Цикл
				
				СтрокаДереваJSON = СтрокаТипаЭлемента.Строки.Добавить();
				
				СтрокаДереваJSON.Тип = СтрокаТипаЭлемента.Тип;				
				СтрокаДереваJSON.ЭтоДанные = Истина;				
				
				/////////////СЕРИАЛИЗАЦИЯ///////////////////
				
				//Параметры сериализации				
				ПараметрыПоиска.Вставить("ДанныеБазы",ПолучитьИнформациюИзБазы()); 				
				ПараметрыПоиска.Вставить("ДанныеСериализации",ДанныеJSON); 				
				ПараметрыПоиска.Вставить("Тип",СтрокаДереваJSON.Тип);				
				ПараметрыПоиска.Вставить("ЕстьВБазе",Ложь);
				
				Чтение = Новый ЧтениеJSON;				
				Чтение.УстановитьСтроку(ДанныеJSON);
				
				//Первоначально необходимо убедится только в наличии или в отсутствии элемента в базе
				МассивВосстанавливаемыхТипов = Новый Массив;
				МассивВосстанавливаемыхТипов.Добавить("Ref");
				
				ДанныеСериализации = СериализаторXDTO.ПрочитатьJSON(Чтение,,"ОбработкаВходящихЗначений",ЭтаФорма,ПараметрыПоиска,,МассивВосстанавливаемыхТипов);
				
				СтрокаДереваJSON.Данные = ДанныеJSON;
				
				////////////////СЕРИАЛИЗАЦИЯ////////////////////
				
				СтрокаДереваJSON.ВыполнитьДействие = Истина;				
				СтрокаДереваJSON.ЕстьВБазе = ПараметрыПоиска.ЕстьВБазе;
				
				Если ПараметрыПоиска.ЕстьВБазе Тогда
					
					//Элемент найден
					СтрокаДереваJSON.Действие = "Обновление";
					СтрокаДереваJSON.Ссылка = ДанныеСериализации.Ссылка;
					
					Если НЕ ЗначениеЗаполнено(СтрокаДереваJSON.ссылка) Тогда
						//Элемент не найден 					
						СтрокаДереваJSON.Действие = "Создание";
						СтрокаДереваJSON.Лог = "Элемент отсутствует в базе. Произойдет создание элемента";
						
					Иначе
						
						СтрокаДереваJSON.Лог = "Элемент был найден. Произойдет обновление данных"; 
						
					КонецЕсли;
					СтрокаДереваJSON.СсылкаОбмена = ПараметрыПоиска.СсылкаJSON;
					
				Иначе
					
					//Элемент не найден 					
					СтрокаДереваJSON.Действие = "Создание";
					СтрокаДереваJSON.Лог = "Элемент отсутствует в базе. Произойдет создание элемента";
					СтрокаДереваJSON.СсылкаОбмена = ПараметрыПоиска.СсылкаJSON;
					
				КонецЕсли;				
				
			КонецЦикла;			
			
		КонецЦикла;		
		
	КонецЦикла;		
	
	ЗначениеВРеквизитФормы(Дерево,"ДеревоДанных");	
	
КонецПроцедуры

#КонецОбласти

#Область СериализацияВходящихЗначений
//Функция переопределяет значения XDTO при необходимости
&НаСервере
Функция ОбработкаВходящихЗначений(Знач Свойство,Тип,Значение,ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Тип = "Акт" Тогда
		
		ОбработкаАкта(Свойство,Тип,Значение,ДополнительныеПараметры);
		
	КонецЕсли;	
	
	//Счет
	Если ДополнительныеПараметры.Тип = "Счет" Тогда
		
		ОбработкаСчета(Свойство,Тип,Значение,ДополнительныеПараметры);
		
	КонецЕсли; 	
	
	//Контрагент
	Если ДополнительныеПараметры.Тип = "Контрагент" Тогда 		
		
		ОбработкаКонтрагента(Свойство,Тип,Значение,ДополнительныеПараметры);
		
	КонецЕсли;
	
	//Договор
	Если ДополнительныеПараметры.Тип = "Договор" Тогда
		
		ОбработкаДоговора(Свойство,Тип,Значение,ДополнительныеПараметры); 
		
	КонецЕсли;
	
	//Номенклатура
	Если ДополнительныеПараметры.Тип = "Номенклатура" Тогда
		
		ОбработкаНоменклатуры(Свойство,Тип,Значение,ДополнительныеПараметры);
		
	КонецЕсли;
	
	//ЮридическоеЛицо
	Если ДополнительныеПараметры.Тип = "ЮридическоеЛицо" Тогда
		
		ОбработкаЮридическоеЛицо(Свойство,Тип,Значение,ДополнительныеПараметры);
		
	КонецЕсли;
	
	//Подразделение
	Если ДополнительныеПараметры.Тип = "Подразделение" Тогда
		
		ОбработкаПодразделение(Свойство,Тип,Значение,ДополнительныеПараметры);
		
	КонецЕсли;
	
	
	//КПС
	Если ДополнительныеПараметры.Тип = "КПС" Тогда
		
		ОбработкаКПС(Свойство,Тип,Значение,ДополнительныеПараметры);
		
	КонецЕсли;
	
	
	//КЭК
	Если ДополнительныеПараметры.Тип = "КЭК" Тогда
		
		ОбработкаКОСГУ(Свойство,Тип,Значение,ДополнительныеПараметры);
		
	КонецЕсли;
	
	
	//ЛицевойСчет
	Если ДополнительныеПараметры.Тип = "ЛицевойСчет" Тогда
		
		ОбработкаЛицевыхСчетов(Свойство,Тип,Значение,ДополнительныеПараметры);
		
	КонецЕсли; 	
	
	//ЛицевойСчет
	Если ДополнительныеПараметры.Тип = "Пользователь" Тогда
		
		ОбработкаПользователей(Свойство,Тип,Значение,ДополнительныеПараметры);
		
	КонецЕсли;
	
	//ЛицевойСчет
	Если ДополнительныеПараметры.Тип = "ЛицевойСчетПлательщика" Тогда
		
		ОбработкаБанковскиеСчета(Свойство,Тип,Значение,ДополнительныеПараметры);
		
	КонецЕсли;
	
	//ЛицевойСчет
	Если ДополнительныеПараметры.Тип = "КассовыйОрган" Тогда
		
		ОбработкаКассовыйОрган(Свойство,Тип,Значение,ДополнительныеПараметры);
		
	КонецЕсли;
	
	//ЛицевойСчет
	Если ДополнительныеПараметры.Тип = "ЕдиницаИзмерения" Тогда
		
		ОбработкаЕдиницыИзмерения(Свойство,Тип,Значение,ДополнительныеПараметры);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Тип = "ТипКонтрагента" Тогда
		
		ОбработкаТипаКонтрагента(Свойство,Тип,Значение,ДополнительныеПараметры);
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции 
&НаСервере
Процедура ОбработкаКонтрагента(Свойство,Тип,Значение,ДополнительныеПараметры)
	
	//Переопределение ссылочных типов
	Если Свойство = "Ref" Тогда
		
		ДополнительныеПараметры.Вставить("СсылкаJSON",Значение.ЛексическоеЗначение);
		
		//Попытка поиска ранее переданного контрагента по соответствию с информационной базой
		ИскомыйКонтрагент = ДополнительныеПараметры.ДанныеБазы.Контрагенты.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если ИскомыйКонтрагент.Количество() = 0 Тогда
			//Попытка поиска по ИНН КПП
			Чтение = Новый ЧтениеJSON;
			
			Чтение.УстановитьСтроку(ДополнительныеПараметры.ДанныеСериализации);
			
			ДанныеСериализации = СериализаторXDTO.ПрочитатьJSON(Чтение);
			
			ИскомыйКонтрагент = ДополнительныеПараметры.ДанныеБазы.Контрагенты.НайтиСтроки(Новый Структура("ИНН,КПП",ДанныеСериализации.ИНН,ДанныеСериализации.КПП));
			
		КонецЕсли;
		
		Если Не ИскомыйКонтрагент.Количество() = 0 Тогда
			
			//Контрагент найден
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйКонтрагент[0].Ссылка.УникальныйИдентификатор());			
			ДополнительныеПараметры.ЕстьВБазе = Истина;								
			
		КонецЕсли;
		
	КонецЕсли;
	
	//ЮридическоеФизическоеЛицо
	Если Свойство = "ЮридическоеФизическоеЛицо" Тогда
		
		//Попытка поиска ранее переданного юридического лица по соответствию с информационной базой
		ИскомоеЮридическоеЛицо = ДополнительныеПараметры.ДанныеБазы.ЮридическиеЛица.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение)); 		
		
		Если Не ИскомоеЮридическоеЛицо.Количество() = 0 Тогда      			
			//юридическое лицо найдено
			Значение = ФабрикаXDTO.Создать(Тип,ИскомоеЮридическоеЛицо[0].Ссылка.УникальныйИдентификатор());
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Свойство = "ТипКонтрагента" Тогда
		
		//Попытка поиска ранее переданного юридического лица по соответствию с информационной базой
		ИскомыйТипКонтрагента = ДополнительныеПараметры.ДанныеБазы.ТипыКонтрагентов.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение)); 		
		
		Если Не ИскомыйТипКонтрагента.Количество() = 0 Тогда      			
			//юридическое лицо найдено
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйТипКонтрагента[0].Ссылка.УникальныйИдентификатор());
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ОбработкаДоговора(Свойство,Тип,Значение,ДополнительныеПараметры)
	
	Если Свойство = "Ref" Тогда 
		//Попытка поиска ранее переданного договора по соответствию с информационной базой
		
		ДополнительныеПараметры.Вставить("СсылкаJSON",Значение.ЛексическоеЗначение);
		
		ИскомыйДоговор = ДополнительныеПараметры.ДанныеБазы.Договоры.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если ИскомыйДоговор.Количество() = 0 Тогда 
			//Попытка поиска по номеру договора
			
			Чтение = Новый ЧтениеJSON;
			
			Чтение.УстановитьСтроку(ДополнительныеПараметры.ДанныеСериализации);
			
			ДанныеСериализации = СериализаторXDTO.ПрочитатьJSON(Чтение);
			
			ИскомыйДоговор = ДополнительныеПараметры.ДанныеБазы.Договоры.НайтиСтроки(Новый Структура("НомерДоговора",ДанныеСериализации.НомерДоговора));
			
		КонецЕсли;
		
		Если Не ИскомыйДоговор.Количество() = 0 Тогда
			
			//Договор найден
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйДоговор[0].Ссылка.УникальныйИдентификатор());			
			ДополнительныеПараметры.ЕстьВБазе = Истина;
			
		КонецЕсли;		
		
	КонецЕсли;
	
	Если Свойство = "Контрагент" Тогда
		
		//Попытка поиска ранее переданного контрагента по соответствию с информационной базой
		ИскомыйКонтрагент = ДополнительныеПараметры.ДанныеБазы.Контрагенты.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если Не ИскомыйКонтрагент.Количество() = 0 Тогда
			
			//Контрагент найден
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйКонтрагент[0].Ссылка.УникальныйИдентификатор());			
			
		КонецЕсли;			
		
	КонецЕсли;
	
	Если Свойство = "Организация" Тогда
		
		Значение = ФабрикаXDTO.Создать(Тип,ОрганизацияПоУмолчанию.Ссылка.УникальныйИдентификатор());			
		
	КонецЕсли;	
	
КонецПроцедуры
&НаСервере
Процедура ОбработкаНоменклатуры(Свойство,Тип,Значение,ДополнительныеПараметры)
	
	Если Свойство = "Ref" Тогда 
		//Попытка поиска ранее переданной номенклатуры по соответствию с информационной базой
		
		ДополнительныеПараметры.Вставить("СсылкаJSON",Значение.ЛексическоеЗначение);
		
		ИскомаяНоменклатура = ДополнительныеПараметры.ДанныеБазы.Номенклатура.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если ИскомаяНоменклатура.Количество() = 0 Тогда 
			//Попытка поиска по полному наименованию
			
			Чтение = Новый ЧтениеJSON;
			
			Чтение.УстановитьСтроку(ДополнительныеПараметры.ДанныеСериализации);
			
			ДанныеСериализации = СериализаторXDTO.ПрочитатьJSON(Чтение);
			
			ИскомаяНоменклатура = ДополнительныеПараметры.ДанныеБазы.Номенклатура.НайтиСтроки(Новый Структура("НаименованиеПолное",ДанныеСериализации.НаименованиеПолное));
			
		КонецЕсли;
		
		Если Не ИскомаяНоменклатура.Количество() = 0 Тогда
			
			//Договор найден
			Значение = ФабрикаXDTO.Создать(Тип,ИскомаяНоменклатура[0].Ссылка.УникальныйИдентификатор());			
			ДополнительныеПараметры.ЕстьВБазе = Истина;
			
		КонецЕсли;		
		
	КонецЕсли;
	
	Если Свойство = "ЕдиницаИзмерения" Тогда
		
		//Попытка поиска ранее переданного контрагента по соответствию с информационной базой
		ИскомаяЕдиницаИзмерения = ДополнительныеПараметры.ДанныеБазы.ЕдиницыИзмерения.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если Не ИскомаяЕдиницаИзмерения.Количество() = 0 Тогда
			
			//Контрагент найден
			Значение = ФабрикаXDTO.Создать(Тип,ИскомаяЕдиницаИзмерения[0].Ссылка.УникальныйИдентификатор());			
			
		КонецЕсли;			
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ОбработкаАкта(Свойство,Тип,Значение,ДополнительныеПараметры)
	
	
	//Переопределение ссылочных типов
	Если Свойство = "Ref" Тогда
		
		//Попытка поиска ранее создаваемого документа
		ДополнительныеПараметры.Вставить("СсылкаJSON",Значение.ЛексическоеЗначение);
		
		ИскомыйДокумент = ДополнительныеПараметры.ДанныеБазы.Документы.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если Не ИскомыйДокумент.Количество() = 0 Тогда
			//Документ найден переопределяем ссылку  				
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйДокумент[0].Ссылка.УникальныйИдентификатор());
			
			ДополнительныеПараметры.ЕстьВБазе = Истина;
		КонецЕсли;	
		
	КонецЕсли;
	
	//Договор
	Если Свойство = "Договор" Тогда
		//Попытка поиска ранее переданного договора по соответствию с информационной базой
		ИскомыйДоговор = ДополнительныеПараметры.ДанныеБазы.Договоры.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если Не ИскомыйДоговор.Количество() = 0 Тогда
			
			//Договор найден
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйДоговор[0].Ссылка.УникальныйИдентификатор());			
			
		КонецЕсли;		
		
	КонецЕсли;
	
	//Контрагент
	Если Свойство = "Контрагент" Тогда
		
		//Попытка поиска ранее переданного контрагента по соответствию с информационной базой
		ИскомыйКонтрагент = ДополнительныеПараметры.ДанныеБазы.Контрагенты.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если Не ИскомыйКонтрагент.Количество() = 0 Тогда
			
			//Контрагент найден
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйКонтрагент[0].Ссылка.УникальныйИдентификатор());			
			
		КонецЕсли;		
		
	КонецЕсли;
	
	//Переопределение ссылочных типов
	Если Свойство = "ДокументОснование" Тогда
		
		ИскомыйДокумент = ДополнительныеПараметры.ДанныеБазы.Документы.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если Не ИскомыйДокумент.Количество() = 0 Тогда
			//Документ найден переопределяем ссылку  				
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйДокумент[0].Ссылка.УникальныйИдентификатор());
			
		КонецЕсли;	
		
	КонецЕсли;
	
	//Номенклатура
	Если Свойство = "Номенклатура" Тогда
		
		//Попытка поиска ранее переданной номенклатуры по соответствию с информационной базой
		ИскомаяНоменклатура = ДополнительныеПараметры.ДанныеБазы.Номенклатура.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если Не ИскомаяНоменклатура.Количество() = 0 Тогда
			
			//номенклатура найдена
			Значение = ФабрикаXDTO.Создать(Тип,ИскомаяНоменклатура[0].Ссылка.УникальныйИдентификатор());			
			
		КонецЕсли;				
		
	КонецЕсли;
	
	//Номенклатура
	Если Свойство = "Подразделение" Тогда
		
		Подразделение = ДополнительныеПараметры.ДанныеБазы.Подразделения.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если Не Подразделение.Количество() = 0 Тогда
			
			//Подразделение найдено
			Значение = ФабрикаXDTO.Создать(Тип,Подразделение[0].Ссылка.УникальныйИдентификатор());			
			
		КонецЕсли;				
		
	КонецЕсли;
	
	Если Свойство = "Организация" Тогда
		
		Значение = ФабрикаXDTO.Создать(Тип,ОрганизацияПоУмолчанию.Ссылка.УникальныйИдентификатор());			
		
	КонецЕсли; 
	
	Если Свойство = "Руководитель" Тогда
		
		//Попытка поиска ранее переданной номенклатуры по соответствию с информационной базой
		ИскомыйСотрудник = ДополнительныеПараметры.ДанныеБазы.Сотрудники.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если Не ИскомыйСотрудник.Количество() = 0 Тогда
			
			//Номенклатура найдена
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйСотрудник[0].Ссылка.УникальныйИдентификатор());			
			
		КонецЕсли;			
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ОбработкаСчета(Свойство,Тип,Значение,ДополнительныеПараметры)
	
	//Переопределение ссылочных типов
	Если Свойство = "Ref" Тогда
		
		ДополнительныеПараметры.Вставить("СсылкаJSON",Значение.ЛексическоеЗначение); 
		
		//Попытка поиска ранее создаваемого документа 		
		ИскомыйДокумент = ДополнительныеПараметры.ДанныеБазы.Документы.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если Не ИскомыйДокумент.Количество() = 0 Тогда
			//Документ найден переопределяем ссылку  				
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйДокумент[0].Ссылка.УникальныйИдентификатор());
			
			ДополнительныеПараметры.ЕстьВБазе = Истина;
		КонецЕсли;	
		
	КонецЕсли;
	
	//Договор
	Если Свойство = "Договор" Тогда
		//Попытка поиска ранее переданного договора по соответствию с информационной базой
		ИскомыйДоговор = ДополнительныеПараметры.ДанныеБазы.Договоры.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если Не ИскомыйДоговор.Количество() = 0 Тогда
			
			//Договор найден
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйДоговор[0].Ссылка.УникальныйИдентификатор());			
			
		КонецЕсли;		
		
	КонецЕсли;
	
	//Контрагент и плательщик одинаковые
	Если Свойство = "Контрагент" ИЛИ Свойство = "Плательщик" Тогда
		
		//Попытка поиска ранее переданного контрагента по соответствию с информационной базой
		ИскомыйКонтрагент = ДополнительныеПараметры.ДанныеБазы.Контрагенты.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если Не ИскомыйКонтрагент.Количество() = 0 Тогда
			
			//Контрагент найден
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйКонтрагент[0].Ссылка.УникальныйИдентификатор());			
			
		КонецЕсли;		
		
	КонецЕсли;
	
	//Номенклатура
	Если Свойство = "Номенклатура" Тогда
		
		//Попытка поиска ранее переданной номенклатуры по соответствию с информационной базой
		ИскомаяНоменклатура = ДополнительныеПараметры.ДанныеБазы.Номенклатура.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если Не ИскомаяНоменклатура.Количество() = 0 Тогда
			
			//Номенклатура найдена
			Значение = ФабрикаXDTO.Создать(Тип,ИскомаяНоменклатура[0].Ссылка.УникальныйИдентификатор());			
			
		КонецЕсли;			
		
	КонецЕсли;
	
	Если Свойство = "Организация" Тогда
		
		Значение = ФабрикаXDTO.Создать(Тип,ОрганизацияПоУмолчанию.Ссылка.УникальныйИдентификатор());			
		
	КонецЕсли;
	
	Если Свойство = "ЛицевойСчет" Тогда
		
		//Попытка поиска ранее переданной номенклатуры по соответствию с информационной базой
		ИскомыйСчет = ДополнительныеПараметры.ДанныеБазы.ЛицевыеСчета.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если Не ИскомыйСчет.Количество() = 0 Тогда
			
			//Номенклатура найдена
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйСчет[0].Ссылка.УникальныйИдентификатор());			
			
		КонецЕсли;			
		
	КонецЕсли;
	
	Если Свойство = "КПС" Тогда
		
		//Попытка поиска ранее переданной номенклатуры по соответствию с информационной базой
		ИскомыйКПС = ДополнительныеПараметры.ДанныеБазы.КПС.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если Не ИскомыйКПС.Количество() = 0 Тогда
			
			//Номенклатура найдена
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйКПС[0].Ссылка.УникальныйИдентификатор());			
			
		КонецЕсли;			
		
	КонецЕсли;
	
	Если Свойство = "КОСГУ" Тогда
		
		//Попытка поиска ранее переданной номенклатуры по соответствию с информационной базой
		ИскомыйКОСГУ = ДополнительныеПараметры.ДанныеБазы.КОСГУ.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если Не ИскомыйКОСГУ.Количество() = 0 Тогда
			
			//Номенклатура найдена
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйКОСГУ[0].Ссылка.УникальныйИдентификатор());			
			
		КонецЕсли;			
		
	КонецЕсли; 
	
	Если Свойство = "Руководитель" ИЛИ Свойство = "ГлавныйБухгалтер" Тогда
		
		//Попытка поиска ранее переданной номенклатуры по соответствию с информационной базой
		ИскомыйСотрудник = ДополнительныеПараметры.ДанныеБазы.Сотрудники.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если Не ИскомыйСотрудник.Количество() = 0 Тогда
			
			//Номенклатура найдена
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйСотрудник[0].Ссылка.УникальныйИдентификатор());			
			
		КонецЕсли;			
		
	КонецЕсли;
	
	Если Свойство = "Подразделение" Тогда
		
		Подразделение = ДополнительныеПараметры.ДанныеБазы.Подразделения.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если Не Подразделение.Количество() = 0 Тогда
			
			//Подразделение найдено
			Значение = ФабрикаXDTO.Создать(Тип,Подразделение[0].Ссылка.УникальныйИдентификатор());			
			
		КонецЕсли;				
		
	КонецЕсли;
	
	Если Свойство = "СчетПлательщика" Тогда
		
		СчетПлательщика = ДополнительныеПараметры.ДанныеБазы.БанковскиеСчета.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если Не СчетПлательщика.Количество() = 0 Тогда
			
			//Подразделение найдено
			Значение = ФабрикаXDTO.Создать(Тип,СчетПлательщика[0].Ссылка.УникальныйИдентификатор());			
			
		КонецЕсли;				
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ОбработкаЮридическоеЛицо(Свойство,Тип,Значение,ДополнительныеПараметры)
	
	//Переопределение ссылочных типов
	Если Свойство = "Ref" Тогда
		
		ДополнительныеПараметры.Вставить("СсылкаJSON",Значение.ЛексическоеЗначение);
		
		//Попытка поиска ранее переданного юридического лица по соответствию с информационной базой
		ИскомоеЮридическоеЛицо = ДополнительныеПараметры.ДанныеБазы.ЮридическиеЛица.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если ИскомоеЮридическоеЛицо.Количество() = 0 Тогда
			//Попытка поиска по ИНН КПП
			Чтение = Новый ЧтениеJSON;
			
			Чтение.УстановитьСтроку(ДополнительныеПараметры.ДанныеСериализации);
			
			ДанныеСериализации = СериализаторXDTO.ПрочитатьJSON(Чтение);
			
			ИскомоеЮридическоеЛицо = ДополнительныеПараметры.ДанныеБазы.ЮридическиеЛица.НайтиСтроки(Новый Структура("ИНН,КПП",ДанныеСериализации.ИНН,ДанныеСериализации.КПП));
			
		КонецЕсли;
		//
		Если Не ИскомоеЮридическоеЛицо.Количество() = 0 Тогда
			
			//юридическое лицо найдено
			Значение = ФабрикаXDTO.Создать(Тип,ИскомоеЮридическоеЛицо[0].Ссылка.УникальныйИдентификатор());			
			ДополнительныеПараметры.ЕстьВБазе = Истина;								
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Свойство = "СтранаРегистрации" Тогда
		
		Значение = ФабрикаXDTO.Создать(Тип,СтранаРегистрации.Ссылка.УникальныйИдентификатор());			
		
	КонецЕсли;
	
	
КонецПроцедуры
&НаСервере
Процедура ОбработкаПодразделение(Свойство,Тип,Значение,ДополнительныеПараметры)
	
	//Переопределение ссылочных типов
	Если Свойство = "Ref" Тогда
		
		ДополнительныеПараметры.Вставить("СсылкаJSON",Значение.ЛексическоеЗначение);
		
		//Попытка поиска ранее переданного юридического лица по соответствию с информационной базой
		ИскомоеПодразделение = ДополнительныеПараметры.ДанныеБазы.Подразделения.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если ИскомоеПодразделение.Количество() = 0 Тогда
			//Попытка поиска по полному наименованию
			Чтение = Новый ЧтениеJSON;
			
			Чтение.УстановитьСтроку(ДополнительныеПараметры.ДанныеСериализации);
			
			ДанныеСериализации = СериализаторXDTO.ПрочитатьJSON(Чтение);
			
			ИскомоеПодразделение = ДополнительныеПараметры.ДанныеБазы.Подразделения.НайтиСтроки(Новый Структура("НаименованиеПолное",ДанныеСериализации.НаименованиеПолное));
			
		КонецЕсли;
		
		Если Не ИскомоеПодразделение.Количество() = 0 Тогда
			
			//юридическое лицо найдено
			Значение = ФабрикаXDTO.Создать(Тип,ИскомоеПодразделение[0].Ссылка.УникальныйИдентификатор());			
			ДополнительныеПараметры.ЕстьВБазе = Истина;								
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если Свойство = "Owner" Тогда
		
		Значение = ФабрикаXDTO.Создать(Тип,ОрганизацияПоУмолчанию.Ссылка.УникальныйИдентификатор());			
		
	КонецЕсли;			
	
	
КонецПроцедуры
&НаСервере
Процедура ОбработкаКПС(Свойство,Тип,Значение,ДополнительныеПараметры)
	
	//Переопределение ссылочных типов
	Если Свойство = "Ref" Тогда
		
		ДополнительныеПараметры.Вставить("СсылкаJSON",Значение.ЛексическоеЗначение);
		
		//Попытка поиска ранее переданного юридического лица по соответствию с информационной базой
		ИскомыйКПС = ДополнительныеПараметры.ДанныеБазы.КПС.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если ИскомыйКПС.Количество() = 0 Тогда
			//Попытка поиска по полному наименованию
			Чтение = Новый ЧтениеJSON;
			
			Чтение.УстановитьСтроку(ДополнительныеПараметры.ДанныеСериализации);
			
			ДанныеСериализации = СериализаторXDTO.ПрочитатьJSON(Чтение);
			
			ИскомыйКПС = ДополнительныеПараметры.ДанныеБазы.КПС.НайтиСтроки(Новый Структура("Код",ДанныеСериализации.Код));
			
		КонецЕсли;
		
		Если Не ИскомыйКПС.Количество() = 0 Тогда
			
			//юридическое лицо найдено
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйКПС[0].Ссылка.УникальныйИдентификатор());			
			ДополнительныеПараметры.ЕстьВБазе = Истина;								
			
		КонецЕсли;
		
	КонецЕсли;		
	
КонецПроцедуры
&НаСервере
Процедура ОбработкаКОСГУ(Свойство,Тип,Значение,ДополнительныеПараметры)
	
	//Переопределение ссылочных типов
	Если Свойство = "Ref" Тогда
		
		ДополнительныеПараметры.Вставить("СсылкаJSON",Значение.ЛексическоеЗначение);
		
		//Попытка поиска ранее переданного юридического лица по соответствию с информационной базой
		ИскомыйКОСГУ = ДополнительныеПараметры.ДанныеБазы.КОСГУ.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если ИскомыйКОСГУ.Количество() = 0 Тогда
			//Попытка поиска по полному наименованию
			Чтение = Новый ЧтениеJSON;
			
			Чтение.УстановитьСтроку(ДополнительныеПараметры.ДанныеСериализации);
			
			ДанныеСериализации = СериализаторXDTO.ПрочитатьJSON(Чтение);
			
			ИскомыйКОСГУ = ДополнительныеПараметры.ДанныеБазы.КОСГУ.НайтиСтроки(Новый Структура("Код",ДанныеСериализации.Код));
			
		КонецЕсли;
		
		Если Не ИскомыйКОСГУ.Количество() = 0 Тогда
			
			//юридическое лицо найдено
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйКОСГУ[0].Ссылка.УникальныйИдентификатор());			
			ДополнительныеПараметры.ЕстьВБазе = Истина;								
			
		КонецЕсли;
		
	КонецЕсли;		
	
КонецПроцедуры
&НаСервере
Процедура ОбработкаЛицевыхСчетов(Свойство,Тип,Значение,ДополнительныеПараметры)
	
	//Переопределение ссылочных типов
	Если Свойство = "Ref" Тогда
		
		ДополнительныеПараметры.Вставить("СсылкаJSON",Значение.ЛексическоеЗначение);
		
		ИскомыйЛицевойСчет = ДополнительныеПараметры.ДанныеБазы.ЛицевыеСчета.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если ИскомыйЛицевойСчет.Количество() = 0 Тогда
			
			Чтение = Новый ЧтениеJSON;
			
			Чтение.УстановитьСтроку(ДополнительныеПараметры.ДанныеСериализации);
			
			ДанныеСериализации = СериализаторXDTO.ПрочитатьJSON(Чтение);
			
			ИскомыйЛицевойСчет = ДополнительныеПараметры.ДанныеБазы.ЛицевыеСчета.НайтиСтроки(Новый Структура("Код",ДанныеСериализации.Код));
			
		КонецЕсли;
		
		Если Не ИскомыйЛицевойСчет.Количество() = 0 Тогда
			
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйЛицевойСчет[0].Ссылка.УникальныйИдентификатор());			
			ДополнительныеПараметры.ЕстьВБазе = Истина;								
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Свойство = "Owner" Тогда
		
		Значение = ФабрикаXDTO.Создать(Тип,ОрганизацияПоУмолчанию.Ссылка.УникальныйИдентификатор());			
		
	КонецЕсли;
	
	Если Свойство = "ПерваяПодпись" ИЛИ Свойство = "ВтораяПодпись"  Тогда
		
		ИскомыйСотрудник = ДополнительныеПараметры.ДанныеБазы.Сотрудники.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если Не ИскомыйСотрудник.Количество() = 0 Тогда
			
			//Договор найден
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйСотрудник[0].Ссылка.УникальныйИдентификатор());			
			
		КонецЕсли; 		
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ОбработкаПользователей(Свойство,Тип,Значение,ДополнительныеПараметры)
	
	//Переопределение ссылочных типов
	Если Свойство = "Ref" Тогда
		
		ДополнительныеПараметры.Вставить("СсылкаJSON",Значение.ЛексическоеЗначение);
		
		ИскомыйПользователь = ДополнительныеПараметры.ДанныеБазы.Сотрудники.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если ИскомыйПользователь.Количество() = 0 Тогда
			//Попытка поиска по полному наименованию
			Чтение = Новый ЧтениеJSON;
			
			Чтение.УстановитьСтроку(ДополнительныеПараметры.ДанныеСериализации);
			
			ДанныеСериализации = СериализаторXDTO.ПрочитатьJSON(Чтение);
			
			ИскомыйПользователь = ДополнительныеПараметры.ДанныеБазы.Сотрудники.НайтиСтроки(Новый Структура("Наименование",ДанныеСериализации.Наименование));
			
		КонецЕсли;
		
		Если Не ИскомыйПользователь.Количество() = 0 Тогда
			
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйПользователь[0].Ссылка.УникальныйИдентификатор());			
			ДополнительныеПараметры.ЕстьВБазе = Истина;								
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если Свойство = "Owner" Тогда
		
		Значение = ФабрикаXDTO.Создать(Тип,ОрганизацияПоУмолчанию.Ссылка.УникальныйИдентификатор());			
		
	КонецЕсли;
	
	Если Свойство = "Контрагент" Тогда
		
		//Попытка поиска ранее переданного контрагента по соответствию с информационной базой
		ИскомыйКонтрагент = ДополнительныеПараметры.ДанныеБазы.Контрагенты.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если Не ИскомыйКонтрагент.Количество() = 0 Тогда
			
			//Контрагент найден
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйКонтрагент[0].Ссылка.УникальныйИдентификатор());			
			
		КонецЕсли;			
		
	КонецЕсли;	
	
КонецПроцедуры
&НаСервере
Процедура ОбработкаБанковскиеСчета(Свойство,Тип,Значение,ДополнительныеПараметры)
	
	//Переопределение ссылочных типов
	Если Свойство = "Ref" Тогда
		
		ДополнительныеПараметры.Вставить("СсылкаJSON",Значение.ЛексическоеЗначение);
		
		ИскомыйБанковскийСчет = ДополнительныеПараметры.ДанныеБазы.БанковскиеСчета.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если ИскомыйБанковскийСчет.Количество() = 0 Тогда
			//Попытка поиска по коду
			Чтение = Новый ЧтениеJSON;
			
			Чтение.УстановитьСтроку(ДополнительныеПараметры.ДанныеСериализации);
			
			ДанныеСериализации = СериализаторXDTO.ПрочитатьJSON(Чтение);
			
			ИскомыйБанковскийСчет = ДополнительныеПараметры.ДанныеБазы.БанковскиеСчета.НайтиСтроки(Новый Структура("Код",ДанныеСериализации.Код));
			
		КонецЕсли;
		
		Если Не ИскомыйБанковскийСчет.Количество() = 0 Тогда
			
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйБанковскийСчет[0].Ссылка.УникальныйИдентификатор());			
			ДополнительныеПараметры.ЕстьВБазе = Истина;								
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Свойство = "Owner" Тогда
		
		//Попытка поиска ранее переданного контрагента по соответствию с информационной базой
		ИскомыйКонтрагент = ДополнительныеПараметры.ДанныеБазы.Контрагенты.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если Не ИскомыйКонтрагент.Количество() = 0 Тогда
			
			//Контрагент найден
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйКонтрагент[0].Ссылка.УникальныйИдентификатор());			
			
		КонецЕсли;			
		
	КонецЕсли;
	
	Если Свойство = "КассовыйОрган" Тогда
		
		ИскомыйКассовыйОрган = ДополнительныеПараметры.ДанныеБазы.КассовыеОрганы.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));			
		
		Если Не ИскомыйКассовыйОрган.Количество() = 0 Тогда
			
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйКассовыйОрган[0].Ссылка.УникальныйИдентификатор());			
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ОбработкаКассовыйОрган(Свойство,Тип,Значение,ДополнительныеПараметры)
	
	//Переопределение ссылочных типов
	Если Свойство = "Ref" Тогда
		
		ДополнительныеПараметры.Вставить("СсылкаJSON",Значение.ЛексическоеЗначение);
		
		ИскомыйКассовыйОрган = ДополнительныеПараметры.ДанныеБазы.КассовыеОрганы.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если ИскомыйКассовыйОрган.Количество() = 0 Тогда
			//Попытка поиска по коду
			Чтение = Новый ЧтениеJSON;
			
			Чтение.УстановитьСтроку(ДополнительныеПараметры.ДанныеСериализации);
			
			ДанныеСериализации = СериализаторXDTO.ПрочитатьJSON(Чтение);
			
			ИскомыйКассовыйОрган = ДополнительныеПараметры.ДанныеБазы.КассовыеОрганы.НайтиСтроки(Новый Структура("Код",ДанныеСериализации.Код));
			
		КонецЕсли;
		
		Если Не ИскомыйКассовыйОрган.Количество() = 0 Тогда
			
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйКассовыйОрган[0].Ссылка.УникальныйИдентификатор());			
			ДополнительныеПараметры.ЕстьВБазе = Истина;								
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Свойство = "Страна" Тогда
		
		Значение = ФабрикаXDTO.Создать(Тип,СтранаРегистрации.Ссылка.УникальныйИдентификатор());			
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ОбработкаЕдиницыИзмерения(Свойство,Тип,Значение,ДополнительныеПараметры)
	
	//Переопределение ссылочных типов
	Если Свойство = "Ref" Тогда
		
		ДополнительныеПараметры.Вставить("СсылкаJSON",Значение.ЛексическоеЗначение);
		
		ИскомаяЕдиницаИзмерения = ДополнительныеПараметры.ДанныеБазы.ЕдиницыИзмерения.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если ИскомаяЕдиницаИзмерения.Количество() = 0 Тогда
			//Попытка поиска по коду
			Чтение = Новый ЧтениеJSON;
			
			Чтение.УстановитьСтроку(ДополнительныеПараметры.ДанныеСериализации);
			
			ДанныеСериализации = СериализаторXDTO.ПрочитатьJSON(Чтение);
			
			ИскомаяЕдиницаИзмерения = ДополнительныеПараметры.ДанныеБазы.ЕдиницыИзмерения.НайтиСтроки(Новый Структура("Наименование",ДанныеСериализации.Наименование));
			
		КонецЕсли;
		
		Если Не ИскомаяЕдиницаИзмерения.Количество() = 0 Тогда
			
			Значение = ФабрикаXDTO.Создать(Тип,ИскомаяЕдиницаИзмерения[0].Ссылка.УникальныйИдентификатор());			
			ДополнительныеПараметры.ЕстьВБазе = Истина;								
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ОбработкаТипаКонтрагента(Свойство,Тип,Значение,ДополнительныеПараметры)
	
	//Переопределение ссылочных типов
	Если Свойство = "Ref" Тогда
		
		ДополнительныеПараметры.Вставить("СсылкаJSON",Значение.ЛексическоеЗначение);
		
		ИскомыйТипКонтрагентов = ДополнительныеПараметры.ДанныеБазы.ТипыКонтрагентов.НайтиСтроки(Новый Структура("СсылкаОбмена",Значение.ЛексическоеЗначение));
		
		Если ИскомыйТипКонтрагентов.Количество() = 0 Тогда
			//Попытка поиска по коду
			Чтение = Новый ЧтениеJSON;
			
			Чтение.УстановитьСтроку(ДополнительныеПараметры.ДанныеСериализации);
			
			ДанныеСериализации = СериализаторXDTO.ПрочитатьJSON(Чтение);
			
			ИскомыйТипКонтрагентов = ДополнительныеПараметры.ДанныеБазы.ТипыКонтрагентов.НайтиСтроки(Новый Структура("Код",ДанныеСериализации.Код));
			
		КонецЕсли;
		
		Если Не ИскомыйТипКонтрагентов.Количество() = 0 Тогда
			
			Значение = ФабрикаXDTO.Создать(Тип,ИскомыйТипКонтрагентов[0].Ссылка.УникальныйИдентификатор());			
			ДополнительныеПараметры.ЕстьВБазе = Истина;								
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеИнформацииИзБазы
//Возвращает данные из базы по условию
&НаСервере
Функция ПолучитьИнформациюИзБазы(НеобходимыеДанные = "")
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Если НеобходимыеДанные = "" Тогда
		
		МассивДанных = Новый Массив;
		
		МассивДанных.Добавить("Контрагенты");
		МассивДанных.Добавить("Договоры");
		МассивДанных.Добавить("Номенклатура");
		МассивДанных.Добавить("Документы");
		МассивДанных.Добавить("ЮридическиеЛица");
		МассивДанных.Добавить("Организации");
		МассивДанных.Добавить("Подразделения");
		МассивДанных.Добавить("КПС");
		МассивДанных.Добавить("КОСГУ");
		МассивДанных.Добавить("ЛицевыеСчета");
		МассивДанных.Добавить("Сотрудники");
		МассивДанных.Добавить("БанковскиеСчета");
		МассивДанных.Добавить("КассовыеОрганы");
		МассивДанных.Добавить("ЕдиницыИзмерения");
		МассивДанных.Добавить("ТипыКонтрагентов");																	
		
	Иначе
		
		МассивДанных = СтрРазделить(НеобходимыеДанные,",");
		
	КонецЕсли;	
	
	Запрос.Текст = СобратьЗапрос(МассивДанных);
			
	Результат = Запрос.Выполнить();
	
	СтруктураЗапросов = Новый Структура;
	
	Для Каждого Данные Из МассивДанных Цикл
		                                                                                                                     		
		СтруктураЗапросов.Вставить(Данные,Запрос.МенеджерВременныхТаблиц.Таблицы.Найти(Данные).ПолучитьДанные().Выгрузить());		
		
	КонецЦикла; 
	
	Возврат СтруктураЗапросов; 	 
	
КонецФункции 

&НаСервере
Функция СобратьЗапрос(МассивДанных)
	
	Разделитель = ОбщегоНазначения.РазделительПакетаЗапросов();
	
	ТекстЗапроса = "";
	
	Итератор = 1; 	
	
	КоличествоЗапросов = МассивДанных.Количество();	
	
	Для Каждого Данные Из МассивДанных Цикл
		  		  		  
		  ТекстЗапроса = ТекстЗапроса + ПолучитьТекстЗапроса(Данные);		  		
		  
		  //не добавляем разделитель если это последний запрос
		  Если Не Итератор = КоличествоЗапросов Тогда
			  
			  ТекстЗапроса = ТекстЗапроса + Разделитель;
			  
		  КонецЕсли;
		  
		  Итератор = Итератор + 1;
		  
	КонецЦикла;
	  
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапроса(Данные)
	
	Текст = "";
	
	Если Данные = "Контрагенты" Тогда
		
		Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка,
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КПП КАК КПП,
		|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника КАК СсылкаОбмена
		|ПОМЕСТИТЬ Контрагенты
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		|		ПО (Контрагенты.Ссылка = (ВЫРАЗИТЬ(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Справочник.Контрагенты)))";
		
		Возврат Текст
		
	КонецЕсли; 	
	
	Если Данные = "Договоры" Тогда
		
		Текст = "ВЫБРАТЬ
		|	Договоры.Ссылка КАК Ссылка,
		|	Договоры.Контрагент КАК Контрагент,
		|	Договоры.НомерДоговора КАК НомерДоговора,
		|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника КАК СсылкаОбмена
		|ПОМЕСТИТЬ Договоры
		|ИЗ
		|	Справочник.Договоры КАК Договоры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		|		ПО (Договоры.Ссылка = (ВЫРАЗИТЬ(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Справочник.Договоры)))
		|ГДЕ
		|	НЕ Договоры.НомерДоговора = """"";
		
		Возврат Текст;
		
	КонецЕсли;
	
	Если Данные = "Номенклатура" Тогда
		
		Текст = "ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.Наименование КАК Наименование,
		|	Номенклатура.Код КАК Код,
		|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
		|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника КАК СсылкаОбмена
		|ПОМЕСТИТЬ Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		|		ПО (Номенклатура.Ссылка = (ВЫРАЗИТЬ(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Справочник.Номенклатура)))";
		
		Возврат Текст;
		
	КонецЕсли;
	
	Если Данные = "Документы" Тогда
		
		Текст = "ВЫБРАТЬ
		|	АктОбОказанииУслуг.Ссылка КАК Ссылка,
		|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника КАК СсылкаОбмена
		|ПОМЕСТИТЬ ВТ_акты
		|ИЗ
		|	Документ.АктОбОказанииУслуг КАК АктОбОказанииУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		|		ПО (АктОбОказанииУслуг.Ссылка = (ВЫРАЗИТЬ(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Документ.АктОбОказанииУслуг)))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетНаОплату.Ссылка КАК Ссылка,
		|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника КАК СсылкаОбмена
		|ПОМЕСТИТЬ ВТ_счета
		|ИЗ
		|	Документ.СчетНаОплату КАК СчетНаОплату
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		|		ПО (СчетНаОплату.Ссылка = (ВЫРАЗИТЬ(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Документ.СчетНаОплату)))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_акты.Ссылка КАК Ссылка,
		|	""Акт"" КАК Тип,
		|	ВТ_акты.СсылкаОбмена КАК СсылкаОбмена
		|ПОМЕСТИТЬ Документы
		|ИЗ
		|	ВТ_акты КАК ВТ_акты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_счета.Ссылка,
		|	""Счет"",
		|	ВТ_счета.СсылкаОбмена
		|ИЗ
		|	ВТ_счета КАК ВТ_счета";
		
		Возврат Текст;
		
	КонецЕсли;
	
	Если Данные = "ЮридическиеЛица" Тогда
		
		Текст = "ВЫБРАТЬ
		|	ЮридическиеЛица.Ссылка КАК Ссылка,
		|	ЮридическиеЛица.ИНН КАК ИНН,
		|	ЮридическиеЛица.КПП КАК КПП,
		|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника КАК СсылкаОбмена
		|ПОМЕСТИТЬ ЮридическиеЛица
		|ИЗ
		|	Справочник.ЮридическиеЛица КАК ЮридическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		|		ПО (ЮридическиеЛица.Ссылка = (ВЫРАЗИТЬ(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Справочник.ЮридическиеЛица)))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка,
		|	ФизическиеЛица.ИНН,
		|	ФизическиеЛица.КПП,
		|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		|		ПО (ФизическиеЛица.Ссылка = (ВЫРАЗИТЬ(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Справочник.ФизическиеЛица)))";
		
		Возврат Текст;
		
	КонецЕсли;
	
	Если Данные = "Организации" Тогда
		
		Текст = "ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка,
		|	Организации.ИНН КАК ИНН,
		|	Организации.КПП КАК КПП,
		|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника КАК СсылкаОбмена
		|ПОМЕСТИТЬ Организации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		|		ПО (Организации.Ссылка = (ВЫРАЗИТЬ(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Справочник.Организации)))
		|ГДЕ
		|	НЕ Организации.ИНН = """"
		|	И НЕ Организации.КПП = """"";
		
		Возврат Текст;
		
	КонецЕсли;
	
	Если Данные = "Подразделения" Тогда
		
		Текст = "ВЫБРАТЬ
		|	Подразделения.Ссылка КАК Ссылка,
		|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника КАК СсылкаОбмена,
		|	Подразделения.НаименованиеПолное КАК НаименованиеПолное
		|ПОМЕСТИТЬ Подразделения
		|ИЗ
		|	Справочник.Подразделения КАК Подразделения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		|		ПО (Подразделения.Ссылка = (ВЫРАЗИТЬ(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Справочник.Подразделения)))";
		Возврат Текст;
		
	КонецЕсли;
	
	Если Данные = "КПС" Тогда
		
		Текст = "ВЫБРАТЬ
		|	КлассификационныеПризнакиСчетов.Ссылка КАК Ссылка,
		|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника КАК СсылкаОбмена,
		|	КлассификационныеПризнакиСчетов.Код КАК Код
		|ПОМЕСТИТЬ КПС
		|ИЗ
		|	Справочник.КлассификационныеПризнакиСчетов КАК КлассификационныеПризнакиСчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		|		ПО (КлассификационныеПризнакиСчетов.Ссылка = (ВЫРАЗИТЬ(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Справочник.КлассификационныеПризнакиСчетов)))";
		
		Возврат Текст;
		
	КонецЕсли;
	
	Если Данные = "КОСГУ" Тогда
		
		Текст = "ВЫБРАТЬ
		|	КОСГУ.Ссылка КАК Ссылка,
		|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника КАК СсылкаОбмена,
		|	КОСГУ.Код КАК Код
		|ПОМЕСТИТЬ КОСГУ
		|ИЗ
		|	Справочник.КОСГУ КАК КОСГУ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		|		ПО (КОСГУ.Ссылка = (ВЫРАЗИТЬ(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Справочник.КОСГУ)))";
		
		Возврат Текст;
		
	КонецЕсли;
	
	Если Данные = "ЛицевыеСчета" Тогда
		
		Текст = "ВЫБРАТЬ
		|	ЛицевыеСчета.Ссылка КАК Ссылка,
		|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника КАК СсылкаОбмена,
		|	ЛицевыеСчета.Код КАК Код
		|ПОМЕСТИТЬ ЛицевыеСчета
		|ИЗ
		|	Справочник.ЛицевыеСчета КАК ЛицевыеСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		|		ПО (ЛицевыеСчета.Ссылка = (ВЫРАЗИТЬ(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Справочник.ЛицевыеСчета)))";
		
		Возврат Текст;
		
	КонецЕсли;
	
	Если Данные = "Сотрудники" Тогда
		
		Текст = "ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка,
		|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника КАК СсылкаОбмена,
		|	Сотрудники.Наименование КАК Наименование
		|ПОМЕСТИТЬ Сотрудники
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		|		ПО (Сотрудники.Ссылка = (ВЫРАЗИТЬ(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Справочник.Сотрудники)))";
		
		Возврат Текст;
		
	КонецЕсли;
	
	Если Данные = "БанковскиеСчета" Тогда
		
		Текст =	"ВЫБРАТЬ
		|	БанковскиеИКазначейскиеСчета.Ссылка КАК Ссылка,
		|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника КАК СсылкаОбмена,
		|	БанковскиеИКазначейскиеСчета.Код КАК Код
		|ПОМЕСТИТЬ БанковскиеСчета
		|ИЗ
		|	Справочник.БанковскиеИКазначейскиеСчета КАК БанковскиеИКазначейскиеСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		|		ПО (БанковскиеИКазначейскиеСчета.Ссылка = (ВЫРАЗИТЬ(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Справочник.БанковскиеИКазначейскиеСчета)))";
		
		Возврат Текст;
		
	КонецЕсли;
	
	Если Данные = "КассовыеОрганы" Тогда
		
		Текст =	"ВЫБРАТЬ
		|	Банки.Ссылка КАК Ссылка,
		|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника КАК СсылкаОбмена,
		|	Банки.Код КАК Код
		|ПОМЕСТИТЬ КассовыеОрганы
		|ИЗ
		|	Справочник.Банки КАК Банки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		|		ПО (Банки.Ссылка = (ВЫРАЗИТЬ(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Справочник.Банки)))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Казначейства.Ссылка,
		|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника,
		|	Казначейства.Код
		|ИЗ
		|	Справочник.Казначейства КАК Казначейства
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		|		ПО (Казначейства.Ссылка = (ВЫРАЗИТЬ(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Справочник.Казначейства)))";
		
		Возврат Текст;
		
	КонецЕсли;
	
	Если Данные = "ЕдиницыИзмерения" Тогда
		
		Текст =	"ВЫБРАТЬ
		|	КлассификаторЕдиницИзмерения.Ссылка КАК Ссылка,
		|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника КАК СсылкаОбмена,
		|	КлассификаторЕдиницИзмерения.Наименование КАК Наименование
		|ПОМЕСТИТЬ ЕдиницыИзмерения
		|ИЗ
		|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		|		ПО (КлассификаторЕдиницИзмерения.Ссылка = (ВЫРАЗИТЬ(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Справочник.КлассификаторЕдиницИзмерения)))";
		
		
		Возврат Текст;
		
	КонецЕсли;
	
	Если Данные = "ТипыКонтрагентов" Тогда
		
		Текст =	"ВЫБРАТЬ
		|	ТипыКонтрагентов.Ссылка КАК Ссылка,
		|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника КАК СсылкаОбмена,
		|	ТипыКонтрагентов.Наименование КАК Наименование,
		|	ТипыКонтрагентов.Код КАК Код
		|ПОМЕСТИТЬ ТипыКонтрагентов
		|ИЗ
		|	Справочник.ТипыКонтрагентов КАК ТипыКонтрагентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		|		ПО (ТипыКонтрагентов.Ссылка = (ВЫРАЗИТЬ(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Справочник.ТипыКонтрагентов)))";
			
		Возврат Текст;
		
	КонецЕсли; 	
	
КонецФункции

#КонецОбласти

#область ЗагрузкаДанных

&НаСервере
Процедура ВыполнитьОбработкуЗагрузкиНаСервере()
	// Вставить содержимое обработчика.
	//Необходимые переменные для работы
	
	Дерево = РеквизитФормыВЗначение("ДеревоДанных");
	
	Если Дерево.Строки.Количество() = 0 Тогда
		
		ОбщегоНазначения.СообщитьПользователю("Не обнаружены данные для загрузки в базу");
		
		Возврат;		
		
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из Дерево.строки Цикл
		
		Для Каждого СтрокаВид Из СтрокаДерева.Строки Цикл
			
			// Требуется получение данных из базы для типов которые зависят от других типов 			
			Если СтрокаВид.Тип = "Контрагент" Тогда
				
				ДанныеБазы = ПолучитьИнформациюИзБазы("ЮридическиеЛица,ТипыКонтрагентов");
				
			КонецЕсли;
			
			Если СтрокаВид.Тип = "Договор" Тогда
				
				ДанныеБазы = ПолучитьИнформациюИзБазы("Контрагенты");
				
			КонецЕсли;
			
			Если СтрокаВид.Тип = "Счет" Тогда
				
				ДанныеБазы = ПолучитьИнформациюИзБазы("Контрагенты,Договоры,Номенклатура,Сотрудники,КПС,КОСГУ,ЛицевыеСчета,Подразделения,БанковскиеСчета");
				
			КонецЕсли;
			
			Если СтрокаВид.Тип = "Акт" Тогда
				
				ДанныеБазы = ПолучитьИнформациюИзБазы("Контрагенты,Договоры,Номенклатура,Документы,Подразделения,Сотрудники");
				
			КонецЕсли;
			
			Если СтрокаВид.Тип = "Пользователь" Тогда
				
				ДанныеБазы = ПолучитьИнформациюИзБазы("Контрагенты");
				
			КонецЕсли;
			
			Если СтрокаВид.Тип = "ЛицевойСчетПлательщика" Тогда
				
				ДанныеБазы = ПолучитьИнформациюИзБазы("Контрагенты,КассовыеОрганы");
				
			КонецЕсли;
			
			Если СтрокаВид.Тип = "ЛицевойСчет" Тогда
				
				ДанныеБазы = ПолучитьИнформациюИзБазы("Сотрудники");
				
			КонецЕсли;
			
			Если СтрокаВид.Тип = "Номенклатура" Тогда
				
				ДанныеБазы = ПолучитьИнформациюИзБазы("ЕдиницыИзмерения");
				
			КонецЕсли;			
			
			Для Каждого СтрокаДанных Из СтрокаВид.Строки Цикл
				
				Если СтрокаДанных.Действие = "Обновление" И НеОбновлятьЭлементы Тогда
					
					СтрокаДанных.Результат = "Пропущено обновление элемента согласно настройке пользователя";
					
					ДобавитьЛог(СтрокаДанных.Лог + " " +  СтрокаДанных.Результат);
					
					//Добавление записи соответствия для последующго поиска
					ДобавитьЗаписьСоответствияОбъектов(СтрокаДанных.Ссылка.ПолучитьОбъект(),СтрокаДанных);
					
					Продолжить;
					
				КонецЕсли;
				
				//Юридическое лицо
				Если СтрокаДанных.Тип = "ЮридическоеЛицо" Тогда
					
					СозданиеОбновлениеЮридическогоЛица(СтрокаДанных);
					
				КонецЕсли;				
				
				//Контрагент
				Если СтрокаДанных.Тип = "Контрагент" Тогда
					
					СозданиеОбновлениеКонтрагента(СтрокаДанных,ДанныеБазы);
					
				КонецЕсли;
				
				//Договор
				Если СтрокаДанных.Тип = "Договор" Тогда
					
					СозданиеОбновлениеДоговора(СтрокаДанных,ДанныеБазы);
					
				КонецЕсли;
				
				//Номенклатура
				Если СтрокаДанных.Тип = "Номенклатура" Тогда
					
					СозданиеОбновлениеНоменклатуры(СтрокаДанных,ДанныеБазы);
					
				КонецЕсли;
				
				//Счет
				Если СтрокаДанных.Тип = "Счет" Тогда
					
					СозданиеОбновлениеСчета(СтрокаДанных,ДанныеБазы);
					
				КонецЕсли;				
				
				//Акт
				Если СтрокаДанных.Тип = "Акт" Тогда
					
					СозданиеОбновлениеАкта(СтрокаДанных,ДанныеБазы);
					
				КонецЕсли;
				
				//Пользователи(Сотрудники)
				Если СтрокаДанных.Тип = "Пользователь" Тогда
					
					СозданиеОбновлениеПользователя(СтрокаДанных,ДанныеБазы);
					
				КонецЕсли;
				
				//Лицевые счета плательщика
				Если СтрокаДанных.Тип = "ЛицевойСчет" Тогда
					
					СозданиеОбновлениеЛицевогоСчета(СтрокаДанных,ДанныеБазы);
					
				КонецЕсли;
				
				//Лицевые счета
				Если СтрокаДанных.Тип = "ЛицевойСчетПлательщика" Тогда
					
					СозданиеОбновлениеСчетаПлательщика(СтрокаДанных,ДанныеБазы);
					
				КонецЕсли;
				
				
				//Подразделение
				Если СтрокаДанных.Тип = "Подразделение" Тогда
					
					СозданиеОбновлениеПодразделения(СтрокаДанных,ДанныеБазы);
					
				КонецЕсли;
				
				//КПС
				Если СтрокаДанных.Тип = "КПС" Тогда
					
					СозданиеОбновлениеКПС(СтрокаДанных);
					
				КонецЕсли;
				
				//КОСГУ
				Если СтрокаДанных.Тип = "КЭК" Тогда
					
					СозданиеОбновлениеКОСГУ(СтрокаДанных);
					
				КонецЕсли; 
				
				//Кассовые органы
				Если СтрокаДанных.Тип = "КассовыйОрган" Тогда
					
					СозданиеОбновлениеКассовогоОргана(СтрокаДанных);
					
				КонецЕсли;
				
				//Единицы измерения
				Если СтрокаДанных.Тип = "ЕдиницаИзмерения" Тогда
					
					СозданиеОбновлениеЕдиницыИзмерения(СтрокаДанных);
					
				КонецЕсли;
				
				Если СтрокаДанных.Тип = "ТипКонтрагента" Тогда
					
					СозданиеОбновлениеТипаКонтрагента(СтрокаДанных);
					
				КонецЕсли;
				
				Если Не СтрокаДанных.ВыполнитьДействие Тогда
					
					СтрокаДанных.Результат = "Отказ от выполнения действия";
					
				КонецЕсли;
				
				ДобавитьЛог(СтрокаДанных.Лог + " " +  СтрокаДанных.Результат);
				
			КонецЦикла;				
			
		КонецЦикла;		
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево,"ДеревоДанных");
	
	ЗаписьЖурналаРегистрации("ДополнительныеОбработки.ЗагрузкаАктовИСчетов",
	УровеньЖурналаРегистрации.Информация,
	,
	,"Произведена загрузка данных актов, счетов и сопутстсвующих справочников");
	
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеОбновление

&НаСервере
Процедура СозданиеОбновлениеЮридическогоЛица(СтрокаДанных)
	
	Если Не СтрокаДанных.Выполнитьдействие Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//Получение данных сериализации
	Чтение = Новый ЧтениеJSON;				
	Чтение.УстановитьСтроку(СтрокаДанных.Данные);
	
	ПараметрыПоиска = новый Структура; 			
	ПараметрыПоиска.Вставить("Тип",СтрокаДанных.Тип); 
	
	МассивВосстанавливаемыхТипов = Новый Массив;
	МассивВосстанавливаемыхТипов.Добавить("СтранаРегистрации");
	
	ДанныеОбъекта = СериализаторXDTO.ПрочитатьJSON(Чтение,,"ОбработкаВходящихЗначений",ЭтаФорма,ПараметрыПоиска,,МассивВосстанавливаемыхТипов); 
	
	//Составной Тип
	
	Если ТипЗнч(ДанныеОбъекта) = ТИП("СправочникОбъект.ФизическиеЛица") Тогда
		
		Менеджер = Справочники.ФизическиеЛица;
		
	Иначе
		
		Менеджер = Справочники.ЮридическиеЛица;
		
	КонецЕсли;
	
	Если СтрокаДанных.Действие = "Создание" Тогда		
		
		ЮридическоеЛицо = Менеджер.СоздатьЭлемент();
		
	Иначе
		//Обновление
		ЮридическоеЛицо = СтрокаДанных.Ссылка.ПолучитьОбъект();
		
	КонецЕсли;
	//Заполнение свойств объектов
	ЗаполнитьЗначенияСвойств(ЮридическоеЛицо,Данныеобъекта,,"Ссылка,Родитель,Владелец,Код");
	
	//Запись
	ЗаписатьСериализованныйОбъект(ЮридическоеЛицо,СтрокаДанных)
	
КонецПроцедуры

&НаСервере
Процедура СозданиеОбновлениеКонтрагента(СтрокаДанных,ДанныеБазы)
	
	Если Не СтрокаДанных.Выполнитьдействие Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//Для контрагента необходимо обращение к базе данных так как для поля "ЮридическоеФизическоеЛицо" данные могли быть получены в этом пакете	
	//Параметры сериализации
	
	ПараметрыПоиска = новый Структура;
	
	ПараметрыПоиска.Вставить("ДанныеБазы",ДанныеБазы); 				
	ПараметрыПоиска.Вставить("Тип",СтрокаДанных.Тип);				
	
	Чтение = Новый ЧтениеJSON;				
	Чтение.УстановитьСтроку(СтрокаДанных.Данные);
	
	МассивВосстанавливаемыхТипов = Новый Массив;
	МассивВосстанавливаемыхТипов.Добавить("ЮридическоеФизическоеЛицо");
	МассивВосстанавливаемыхТипов.Добавить("ТипКонтрагента");
	
	ДанныеОбъекта = СериализаторXDTO.ПрочитатьJSON(Чтение,,"ОбработкаВходящихЗначений",ЭтаФорма,ПараметрыПоиска,,МассивВосстанавливаемыхТипов); 	
	
	Если СтрокаДанных.Действие = "Создание" Тогда		
		
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		
	Иначе
		//Обновление
		Контрагент = СтрокаДанных.Ссылка.ПолучитьОбъект();
		
	КонецЕсли;
	
	//Заполнение свойств
	ЗаполнитьЗначенияСвойств(Контрагент,Данныеобъекта,,"Ссылка,Владелец,Код,Родитель");
	
	//Запись
	ЗаписатьСериализованныйОбъект(Контрагент,СтрокаДанных); 	
	
КонецПроцедуры

&НаСервере
Процедура СозданиеОбновлениеДоговора(СтрокаДанных,ДанныеБазы)
	
	Если Не СтрокаДанных.Выполнитьдействие Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//Для договора необходимо обращение к базе данных так как для поля "Контрагент" данные могли быть получены в этом пакете
	
	//Параметры сериализации	
	ПараметрыПоиска = новый Структура;
	
	ПараметрыПоиска.Вставить("ДанныеБазы",ДанныеБазы); 				
	ПараметрыПоиска.Вставить("Тип",СтрокаДанных.Тип);				
	
	Чтение = Новый ЧтениеJSON;				
	Чтение.УстановитьСтроку(СтрокаДанных.Данные);
	
	МассивВосстанавливаемыхТипов = Новый Массив;
	МассивВосстанавливаемыхТипов.Добавить("Контрагент");
	МассивВосстанавливаемыхТипов.Добавить("Организация");
	
	ДанныеОбъекта = СериализаторXDTO.ПрочитатьJSON(Чтение,,"ОбработкаВходящихЗначений",ЭтаФорма,ПараметрыПоиска,,МассивВосстанавливаемыхТипов);
	
	Если СтрокаДанных.Действие = "Создание" Тогда
		
		Договор = Справочники.Договоры.СоздатьЭлемент();
		
	Иначе
		//Обновление
		Договор = СтрокаДанных.Ссылка.ПолучитьОбъект();
		
	КонецЕсли;
	
	//Заполнение свойств
	ЗаполнитьЗначенияСвойств(Договор,ДанныеОбъекта,,"Ссылка,Владелец,Код");	
	
	//Запись
	ЗаписатьСериализованныйОбъект(Договор,СтрокаДанных);	
	
КонецПроцедуры

&НаСервере
Процедура СозданиеОбновлениеНоменклатуры(СтрокаДанных,ДанныеБазы)
	
	Если Не СтрокаДанных.Выполнитьдействие Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыПоиска = новый Структура;
	
	ПараметрыПоиска.Вставить("ДанныеБазы",ДанныеБазы); 				
	ПараметрыПоиска.Вставить("Тип",СтрокаДанных.Тип);
	
	//Получение данных сериализации
	Чтение = Новый ЧтениеJSON;				
	Чтение.УстановитьСтроку(СтрокаДанных.Данные);
	
	МассивВосстанавливаемыхТипов = Новый Массив;
	МассивВосстанавливаемыхТипов.Добавить("ЕдиницаИзмерения");
	
	ДанныеОбъекта = СериализаторXDTO.ПрочитатьJSON(Чтение,,"ОбработкаВходящихЗначений",ЭтаФорма,ПараметрыПоиска,,МассивВосстанавливаемыхТипов);	
	
	Если СтрокаДанных.Действие = "Создание" Тогда		
		
		Номенклатура = Справочники.Номенклатура.СоздатьЭлемент();
		
	Иначе
		//Обновление
		Номенклатура = СтрокаДанных.Ссылка.ПолучитьОбъект(); 		
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Номенклатура,Данныеобъекта,,"Ссылка,Владелец,Родитель,Код");
	
	//Запись
	ЗаписатьСериализованныйОбъект(Номенклатура,СтрокаДанных);
	
КонецПроцедуры

&НаСервере
Процедура СозданиеОбновлениеПользователя(СтрокаДанных,ДанныеБазы)
	
	Если Не СтрокаДанных.Выполнитьдействие Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//Параметры сериализации
	
	ПараметрыПоиска = новый Структура;
	
	ПараметрыПоиска.Вставить("ДанныеБазы",ДанныеБазы); 				
	ПараметрыПоиска.Вставить("Тип",СтрокаДанных.Тип);				
	
	Чтение = Новый ЧтениеJSON;				
	Чтение.УстановитьСтроку(СтрокаДанных.Данные);
	
	МассивВосстанавливаемыхТипов = Новый Массив;
	МассивВосстанавливаемыхТипов.Добавить("Контрагент");
	МассивВосстанавливаемыхТипов.Добавить("Owner");
	
	ДанныеОбъекта = СериализаторXDTO.ПрочитатьJSON(Чтение,,"ОбработкаВходящихЗначений",ЭтаФорма,ПараметрыПоиска,,МассивВосстанавливаемыхТипов); 	
	
	Если СтрокаДанных.Действие = "Создание" Тогда		
		
		Пользователь = Справочники.Сотрудники.СоздатьЭлемент();
		
	Иначе
		//Обновление
		Пользователь = СтрокаДанных.Ссылка.ПолучитьОбъект();
		
	КонецЕсли;
	
	//Заполнение свойств
	ЗаполнитьЗначенияСвойств(Пользователь,Данныеобъекта,,"Ссылка,Код,Родитель");
	
	//Запись
	ЗаписатьСериализованныйОбъект(Пользователь,СтрокаДанных);
	
	//Возможно потребуется запись в регистр сведений ФИО физических лиц
	
КонецПроцедуры

&НаСервере
Процедура СозданиеОбновлениеСчетаПлательщика(СтрокаДанных,ДанныеБазы)
	
	Если Не СтрокаДанных.Выполнитьдействие Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//Параметры сериализации
	
	ПараметрыПоиска = новый Структура;
	
	ПараметрыПоиска.Вставить("ДанныеБазы",ДанныеБазы); 				
	ПараметрыПоиска.Вставить("Тип",СтрокаДанных.Тип);				
	
	Чтение = Новый ЧтениеJSON;				
	Чтение.УстановитьСтроку(СтрокаДанных.Данные);
	
	МассивВосстанавливаемыхТипов = Новый Массив;
	МассивВосстанавливаемыхТипов.Добавить("КассовыйОрган");
	МассивВосстанавливаемыхТипов.Добавить("Owner");
	
	ДанныеОбъекта = СериализаторXDTO.ПрочитатьJSON(Чтение,,"ОбработкаВходящихЗначений",ЭтаФорма,ПараметрыПоиска,,МассивВосстанавливаемыхТипов); 	
	
	Если СтрокаДанных.Действие = "Создание" Тогда		
		
		СчетПлательщика = Справочники.БанковскиеИКазначейскиеСчета.СоздатьЭлемент();
		
	Иначе
		//Обновление
		СчетПлательщика = СтрокаДанных.Ссылка.ПолучитьОбъект();
		
	КонецЕсли;
	
	//Заполнение свойств
	ЗаполнитьЗначенияСвойств(СчетПлательщика,Данныеобъекта,,"Ссылка,Код,Родитель");
	
	//Запись
	ЗаписатьСериализованныйОбъект(СчетПлательщика,СтрокаДанных);	
	
КонецПроцедуры

&НаСервере
Процедура СозданиеОбновлениеЛицевогоСчета(СтрокаДанных,ДанныеБазы)
	
	Если Не СтрокаДанных.Выполнитьдействие Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//Параметры сериализации
	
	ПараметрыПоиска = новый Структура;
	
	ПараметрыПоиска.Вставить("Тип",СтрокаДанных.Тип);
	ПараметрыПоиска.Вставить("ДанныеБазы",ДанныеБазы); 
	
	Чтение = Новый ЧтениеJSON;				
	Чтение.УстановитьСтроку(СтрокаДанных.Данные);
	
	МассивВосстанавливаемыхТипов = Новый Массив;
	МассивВосстанавливаемыхТипов.Добавить("ПерваяПодпись");
	МассивВосстанавливаемыхТипов.Добавить("ВтораяПодпись");
	МассивВосстанавливаемыхТипов.Добавить("Owner");
	
	ДанныеОбъекта = СериализаторXDTO.ПрочитатьJSON(Чтение,,"ОбработкаВходящихЗначений",ЭтаФорма,ПараметрыПоиска,,МассивВосстанавливаемыхТипов); 	
	
	Если СтрокаДанных.Действие = "Создание" Тогда		
		
		ЛицевойСчет = Справочники.ЛицевыеСчета.СоздатьЭлемент();
		
	Иначе
		//Обновление
		ЛицевойСчет = СтрокаДанных.Ссылка.ПолучитьОбъект();
		
	КонецЕсли;
	
	//Заполнение свойств
	ЗаполнитьЗначенияСвойств(ЛицевойСчет,Данныеобъекта,,"Ссылка,Код,Родитель");
	
	//Запись
	ЗаписатьСериализованныйОбъект(ЛицевойСчет,СтрокаДанных);	
	
КонецПроцедуры

&НаСервере
Процедура СозданиеОбновлениеПодразделения(СтрокаДанных,ДанныеБазы)
	
	Если Не СтрокаДанных.Выполнитьдействие Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//Параметры сериализации
	
	ПараметрыПоиска = новый Структура;
	
	ПараметрыПоиска.Вставить("ДанныеБазы",ДанныеБазы); 				
	ПараметрыПоиска.Вставить("Тип",СтрокаДанных.Тип);				
	
	Чтение = Новый ЧтениеJSON;				
	Чтение.УстановитьСтроку(СтрокаДанных.Данные);
	
	МассивВосстанавливаемыхТипов = Новый Массив;
	МассивВосстанавливаемыхТипов.Добавить("Owner");
	
	ДанныеОбъекта = СериализаторXDTO.ПрочитатьJSON(Чтение,,"ОбработкаВходящихЗначений",ЭтаФорма,ПараметрыПоиска,,МассивВосстанавливаемыхТипов); 	
	
	Если СтрокаДанных.Действие = "Создание" Тогда		
		
		Подразделение = Справочники.Пользователь.СоздатьЭлемент();
		
	Иначе
		//Обновление
		Подразделение = СтрокаДанных.Ссылка.ПолучитьОбъект();
		
	КонецЕсли;
	
	//Заполнение свойств
	ЗаполнитьЗначенияСвойств(Подразделение,Данныеобъекта,,"Ссылка,Код");
	
	//Запись
	ЗаписатьСериализованныйОбъект(Подразделение,СтрокаДанных) 	
	
КонецПроцедуры

&НаСервере
Процедура СозданиеОбновлениеКПС(СтрокаДанных)
	
	Если Не СтрокаДанных.Выполнитьдействие Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//Получение данных сериализации
	Чтение = Новый ЧтениеJSON;				
	Чтение.УстановитьСтроку(СтрокаДанных.Данные);
	
	ДанныеОбъекта = СериализаторXDTO.ПрочитатьJSON(Чтение);	
	
	Если СтрокаДанных.Действие = "Создание" Тогда		
		
		КПС = Справочники.КлассификационныеПризнакиСчетов.СоздатьЭлемент();
		
	Иначе
		//Обновление
		КПС = СтрокаДанных.Ссылка.ПолучитьОбъект(); 		
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(КПС,Данныеобъекта,,"Ссылка,Владелец,Родитель,Код");
	
	//Запись
	ЗаписатьСериализованныйОбъект(КПС,СтрокаДанных) 	
	
КонецПроцедуры

&НаСервере
Процедура СозданиеОбновлениеКОСГУ(СтрокаДанных)
	
	Если Не СтрокаДанных.Выполнитьдействие Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//Получение данных сериализации
	Чтение = Новый ЧтениеJSON;				
	Чтение.УстановитьСтроку(СтрокаДанных.Данные);
	
	ДанныеОбъекта = СериализаторXDTO.ПрочитатьJSON(Чтение);	
	
	Если СтрокаДанных.Действие = "Создание" Тогда		
		
		КОСГУ = Справочники.КОСГУ.СоздатьЭлемент();
		
	Иначе
		//Обновление
		КОСГУ = СтрокаДанных.Ссылка.ПолучитьОбъект(); 		
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(КОСГУ,Данныеобъекта,,"Ссылка,Владелец,Родитель,Код");
	
	//Запись
	ЗаписатьСериализованныйОбъект(КОСГУ,СтрокаДанных)	
	
КонецПроцедуры

&НаСервере
Процедура СозданиеОбновлениеКассовогоОргана(СтрокаДанных)
	
	Если Не СтрокаДанных.Выполнитьдействие Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//Получение данных сериализации
	Чтение = Новый ЧтениеJSON;				
	Чтение.УстановитьСтроку(СтрокаДанных.Данные);
	
	ПараметрыПоиска = новый Структура; 			
	ПараметрыПоиска.Вставить("Тип",СтрокаДанных.Тип); 
	
	МассивВосстанавливаемыхТипов = Новый Массив;
	МассивВосстанавливаемыхТипов.Добавить("СтранаРегистрации");
	
	ДанныеОбъекта = СериализаторXDTO.ПрочитатьJSON(Чтение,,"ОбработкаВходящихЗначений",ЭтаФорма,ПараметрыПоиска,,МассивВосстанавливаемыхТипов); 
	
	//Составной тип
	Если ТипЗнч(ДанныеОбъекта) = Тип("СправочникОбъект.Банки") Тогда
		
		Менеджер = Справочники.Банки;
		
	Иначе
		
		Менеджер = Справочники.Казначейства;
		
	КонецЕсли;
	
	Если СтрокаДанных.Действие = "Создание" Тогда		
		
		Орган = Менеджер.СоздатьЭлемент();
		
	Иначе
		//Обновление
		Орган = СтрокаДанных.Ссылка.ПолучитьОбъект(); 		
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Орган,Данныеобъекта,,"Ссылка,Владелец,Родитель,Код,БИКРКЦ");
	
	//Запись
	ЗаписатьСериализованныйОбъект(Орган,СтрокаДанных) 	
	
КонецПроцедуры

&НаСервере
Процедура СозданиеОбновлениеЕдиницыИзмерения(СтрокаДанных)
	
	Если Не СтрокаДанных.Выполнитьдействие Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//Получение данных сериализации
	Чтение = Новый ЧтениеJSON;				
	Чтение.УстановитьСтроку(СтрокаДанных.Данные);
	
	ДанныеОбъекта = СериализаторXDTO.ПрочитатьJSON(Чтение);	
	
	Если СтрокаДанных.Действие = "Создание" Тогда		
		
		ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		
	Иначе
		//Обновление
		ЕдиницаИзмерения = СтрокаДанных.Ссылка.ПолучитьОбъект(); 		
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЕдиницаИзмерения,Данныеобъекта,,"Ссылка,Владелец,Родитель,Код");
	
	//Запись
	ЗаписатьСериализованныйОбъект(ЕдиницаИзмерения,СтрокаДанных) 	
	
КонецПроцедуры

&НаСервере
Процедура СозданиеОбновлениеТипаКонтрагента(СтрокаДанных)
	
	Если Не СтрокаДанных.Выполнитьдействие Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//Получение данных сериализации
	Чтение = Новый ЧтениеJSON;				
	Чтение.УстановитьСтроку(СтрокаДанных.Данные);
	
	ДанныеОбъекта = СериализаторXDTO.ПрочитатьJSON(Чтение);	
	
	ТипКонтрагента = СтрокаДанных.Ссылка.ПолучитьОбъект();		
	
	//Запись
	ЗаписатьСериализованныйОбъект(ТипКонтрагента,СтрокаДанных) 	
	
КонецПроцедуры

#Область Документы

&НаСервере
Процедура СозданиеОбновлениеСчета(СтрокаДанных,ДанныеБазы)
	
	Если Не СтрокаДанных.Выполнитьдействие Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//Параметры сериализации	
	ПараметрыПоиска = новый Структура;
	
	ПараметрыПоиска.Вставить("ДанныеБазы",ДанныеБазы); 				
	ПараметрыПоиска.Вставить("Тип",СтрокаДанных.Тип);				
	
	Чтение = Новый ЧтениеJSON;				
	Чтение.УстановитьСтроку(СтрокаДанных.Данные);
	
	МассивВосстанавливаемыхТипов = Новый Массив;
	МассивВосстанавливаемыхТипов.Добавить("Контрагент");
	МассивВосстанавливаемыхТипов.Добавить("Плательщик");
	МассивВосстанавливаемыхТипов.Добавить("Договор");
	МассивВосстанавливаемыхТипов.Добавить("Номенклатура");
	МассивВосстанавливаемыхТипов.Добавить("Организация"); 
	МассивВосстанавливаемыхТипов.Добавить("Руководитель");
	МассивВосстанавливаемыхТипов.Добавить("ГлавныйБухгалтер");
	МассивВосстанавливаемыхТипов.Добавить("ЛицевойСчет");
	МассивВосстанавливаемыхТипов.Добавить("КПС");
	МассивВосстанавливаемыхТипов.Добавить("КОСГУ");
	МассивВосстанавливаемыхТипов.Добавить("Подразделение");
	МассивВосстанавливаемыхТипов.Добавить("СчетПлательщика");
	
	ДанныеОбъекта = СериализаторXDTO.ПрочитатьJSON(Чтение,,"ОбработкаВходящихЗначений",ЭтаФорма,ПараметрыПоиска,,МассивВосстанавливаемыхТипов);
	
	Если СтрокаДанных.Действие = "Создание" Тогда
		
		Счет = Документы.СчетНаОплату.СоздатьДокумент();			
		
		Счет.Ответственный = ТекущийПользователь;
		
		Если Не НеСоздаватьКомментарии Тогда
			
			Счет.Комментарий = " (Документ был загружен из файла. Дата загрузки: " + Строка(ТекущаяДата()) +
			". Ответственный: " + ТекущийПользователь.Наименование + ").";
			
		КонецЕсли;
		
	Иначе
		//Обновление
		Счет = СтрокаДанных.Ссылка.ПолучитьОбъект();
		
		Если Не НеСоздаватьКомментарии Тогда
			
			Счет.Комментарий = Счет.Комментарий + " (Документ был обновлен из файла. Дата обновления: " + Строка(ТекущаяДата()) +
			". Ответственный: " + ТекущийПользователь.Наименование + ").";
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Свойства
	ЗаполнитьЗначенияСвойств(Счет,ДанныеОбъекта,,"Ссылка,Ответственный,Движения,Комментарий,Услуги,Предоплата,Номер");
	
	//Табличные части
	ЗаполнениеТаблицУОбъектов(Счет,ДанныеОбъекта,"Услуги,Предоплата"); 
	
	//Запись
	ЗаписатьСериализованныйОбъект(Счет,СтрокаДанных,Истина);	
	
КонецПроцедуры

&НаСервере
Процедура СозданиеОбновлениеАкта(СтрокаДанных,ДанныеБазы)
	
	Если Не СтрокаДанных.Выполнитьдействие Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//Для акта необходимо обращение к базе данных так как для поля "Контрагент","Договор","Номенклатура","ДокументОснование" данные могли быть получены в этом пакете
	
	//Параметры сериализации	
	ПараметрыПоиска = новый Структура;
	
	ПараметрыПоиска.Вставить("ДанныеБазы",ДанныеБазы); 				
	ПараметрыПоиска.Вставить("Тип",СтрокаДанных.Тип);				
	
	
	Чтение = Новый ЧтениеJSON;				
	Чтение.УстановитьСтроку(СтрокаДанных.Данные);
	
	МассивВосстанавливаемыхТипов = Новый Массив;
	МассивВосстанавливаемыхТипов.Добавить("Контрагент");
	МассивВосстанавливаемыхТипов.Добавить("Договор");
	МассивВосстанавливаемыхТипов.Добавить("Номенклатура"); 
	МассивВосстанавливаемыхТипов.Добавить("ДокументОснование");
	МассивВосстанавливаемыхТипов.Добавить("Подразделение");
	МассивВосстанавливаемыхТипов.Добавить("Организация");
	МассивВосстанавливаемыхТипов.Добавить("Руководитель");
	
	ДанныеОбъекта = СериализаторXDTO.ПрочитатьJSON(Чтение,,"ОбработкаВходящихЗначений",ЭтаФорма,ПараметрыПоиска,,МассивВосстанавливаемыхТипов);
	
	Если СтрокаДанных.Действие = "Создание" Тогда
		
		Акт = Документы.АктОбОказанииУслуг.СоздатьДокумент();
		
		Акт.Ответственный = ТекущийПользователь;
		
		Если Не НеСоздаватьКомментарии Тогда
			
			Акт.Комментарий = " (Документ был загружен из файла. Дата загрузки: " + Строка(ТекущаяДата()) +
			". Ответственный: " + ТекущийПользователь.Наименование + ").";
			
		КонецЕсли;
		
	Иначе
		//Обновление
		Акт = СтрокаДанных.Ссылка.ПолучитьОбъект();
		
		Если Не НеСоздаватьКомментарии Тогда
			
			Акт.Комментарий = Акт.Комментарий + " (Документ был обновлен из файла. Дата обновления: " + Строка(ТекущаяДата()) +
			". Ответственный: " + ТекущийПользователь.Наименование + ")."; 
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Свойства
	ЗаполнитьЗначенияСвойств(Акт,ДанныеОбъекта,,"Ссылка,Ответственный,Движения,Комментарий,УслугиОказанные,Номер");
	
	//Табличные части
	ЗаполнениеТаблицУОбъектов(Акт,ДанныеОбъекта,"УслугиОказанные"); 
	
	//Запись
	ЗаписатьСериализованныйОбъект(Акт,СтрокаДанных,Истина);	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВспомогательныеПроцедуры
//Добавляет данные в регистр сведений "Соответствия объетов информационных баз" для последующей однозначной идентификации
&НаСервере
Процедура ДобавитьЗаписьСоответствияОбъектов(ОбъектОбмена,СтрокаДанных)
	
	//Добавление записи к соответствию объектов информационной базы
	СтруктураЗаписи = Новый Структура;
	
	Тип = Строка(ТипЗнч(ОбъектОбмена.Ссылка));
	
	СтруктураЗаписи.Вставить("УникальныйИдентификаторПриемника",СтрокаДанных.СсылкаОбмена);	
	СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника",ОбъектОбмена.Ссылка);	
	СтруктураЗаписи.Вставить("ТипПриемника",Тип);	
	СтруктураЗаписи.Вставить("ТипИсточника",Тип); 	
	СтруктураЗаписи.Вставить("УзелИнформационнойБазы",ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел());
	
	СтрокаДанных.Ссылка = ОбъектОбмена.Ссылка;
	
	Попытка
		
		РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи,Истина);
		
	Исключение
		
		Ошибка = ОписаниеОшибки();
		
		СтрокаДанных.Результат = Ошибка;
		
		ЗаписьЖурналаРегистрации("ДополнительныеОбработки.ЗагрузкаАктовИСчетов",УровеньЖурналаРегистрации.Ошибка,,,Ошибка);
		
	КонецПопытки; 		
	
КонецПроцедуры
//Заполняет табличные части
&НаСервере
Процедура ЗаполнениеТаблицУОбъектов(Приемник,Источник,Таблицы)
	
	ТаблицыОбмена = СтрРазделить(Таблицы,",");
	
	Для Каждого Таблица Из ТаблицыОбмена Цикл
		
		//Перед заполнением очищаем таблицы
		Приемник[Таблица].Очистить();
		
		Приемник[Таблица].Загрузить(Источник[Таблица].Выгрузить());	
		
	КонецЦикла; 	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЛог(ТекстЛога)
	
	Лог.ДобавитьСтроку(Строка(ТекущаяДата()) + " " + ТекстЛога);	
	
КонецПроцедуры
//Помещает данные в базу через попытку записи
&НаСервере
Процедура ЗаписатьСериализованныйОбъект(ОбъектСериализации,СтрокаДанных,ЭтоДокумент = Ложь)
	
	Попытка
		
		Если ЭтоДокумент Тогда
			
			ОбъектСериализации.Записать(РежимЗаписиДокумента.Запись);
			
		Иначе
			
			ОбъектСериализации.Записать();
			
		КонецЕсли;
		
		СтрокаДанных.Результат = "Выполнено";
		
		ДобавитьЗаписьСоответствияОбъектов(ОбъектСериализации,СтрокаДанных);
		
	Исключение
		
		Ошибка = ОписаниеОшибки();
		
		СтрокаДанных.Результат = Ошибка;
		
		ЗаписьЖурналаРегистрации("ДополнительныеОбработки.ЗагрузкаАктовИСчетов",УровеньЖурналаРегистрации.Ошибка,,,Ошибка); 		
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
